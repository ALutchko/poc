ubuntu: ami-0739f8cdb239fe9ae
v1: ami-0bebc4be776505dc9



# https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html
# https://www.oracle.com/java/technologies/javase-jdk11-downloads.html

mkdir -p /var/cache/oracle-jdk11-installer-local
wget https://360-sandbox.s3.amazonaws.com/jdk-11.0.9_linux-x64_bin.tar.gz
mv jdk-11.0.9_linux-x64_bin.tar.gz /var/cache/oracle-jdk11-installer-local/

apt-add-repository ppa:linuxuprising/java
apt update && apt-get upgrade -y
apt install oracle-java11-set-default-local unzip

java -version

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
./aws/install
rm -rf ./aws
aws --version

curl -O https://raw.githubusercontent.com/spinnaker/halyard/master/install/debian/InstallHalyard.sh

useradd halyard -s /usr/sbin/nologin
bash ./InstallHalyard.sh --user halyard

cat /home/halyard/.bashrc >> ./.bashrc
. .bashrc

hal -v
# update-halyard

export AWS_ACCOUNT_NAME="sandbox"
export ACCOUNT_ID="011874698875"
export REGION_PRI="eu-central-1"
export REGION_SEC="us-west-2"
export BUCKET_NAME="360-sb-spin"    # will be created!
export FQDN="spin.olowek.eu"

pass=$(openssl rand -base64 17 | sed "s/[^a-zA-Z0-9]//g")
echo $pass

# https://spinnaker.io/setup/security/ssl/
export CA_KEY_PASSWORD="CA_KEY_$pass"
export DECK_KEY_PASSWORD="DECK_KEY_$pass"
export GATE_KEY_PASSWORD="GATE_KEY_$pass"
export JKS_PASSWORD="JKS_$pass"
export GATE_EXPORT_PASSWORD="GATE_P12_$pass"

# https://spinnaker.io/setup/install/providers/aws/aws-ec2/
hal config provider aws account add $AWS_ACCOUNT_NAME \
    --account-id ${ACCOUNT_ID} \
    --assume-role role/BaseIAMRole \
    --regions $REGION_PRI, $REGION_SEC

hal config provider aws enable
hal config deploy edit --type localdebian

hal config storage s3 edit --region $REGION_PRI --bucket $BUCKET_NAME --color true
hal config storage edit --type s3
hal config stats disable

hal version list
spin_ver=$(hal version list | grep " - " | tail -n 1 | awk '{print $2}')
echo latest spinnaker is $spin_ver
hal config version edit --version $spin_ver
echo "host: 0.0.0.0" | tee \
    /home/halyard/.hal/default/service-settings/gate.yml \
    /home/halyard/.hal/default/service-settings/deck.yml

a2enmod ssl

# Create the server certificate(s)
openssl genrsa -des3 -out ca.key -passout pass:${CA_KEY_PASSWORD} 4096
openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -passin pass:${CA_KEY_PASSWORD}
openssl genrsa -des3 -out deck.key -passout pass:${DECK_KEY_PASSWORD} 4096
openssl req -new -key deck.key -out deck.csr -passin pass:${DECK_KEY_PASSWORD}
openssl x509 -req -days 3650 -in deck.csr -CA ca.crt -CAkey ca.key \
   -CAcreateserial -out deck.crt -passin pass:${CA_KEY_PASSWORD}
openssl genrsa -des3 -out gate.key -passout pass:${GATE_KEY_PASSWORD} 4096
openssl req -new -key gate.key -out gate.csr -passin pass:${GATE_KEY_PASSWORD}
openssl x509 -sha256 -req -days 365 -in gate.csr -CA ca.crt -CAkey ca.key \
   -CAcreateserial -out gate.crt -passin pass:${CA_KEY_PASSWORD}
openssl pkcs12 -export -clcerts -in gate.crt -inkey gate.key -out gate.p12 \
   -name gate -passin pass:${GATE_KEY_PASSWORD} -password pass:${GATE_EXPORT_PASSWORD}
keytool -importkeystore -srckeystore gate.p12 -srcstoretype pkcs12 -srcalias gate \
   -destkeystore gate.jks -destalias gate -deststoretype pkcs12 \
   -deststorepass ${JKS_PASSWORD} -destkeypass ${JKS_PASSWORD} \
   -srcstorepass ${GATE_EXPORT_PASSWORD}
keytool -importcert -keystore gate.jks -alias ca \
   -file ca.crt -storepass ${JKS_PASSWORD} -noprompt

# now test: It should contain two entries
#    gate as a PrivateKeyEntry
#    ca as a trustedCertEntry
keytool -list -keystore gate.jks -storepass ${JKS_PASSWORD}

#  Configure SSL for Gate and Deck
mv deck.crt deck.key gate.jks /opt/halyard/
export KEYSTORE_PATH=/opt/halyard/gate.jks
export SERVER_CERT=/opt/halyard/deck.crt
export SERVER_KEY=/opt/halyard/deck.key
echo $JKS_PASSWORD  # use this pass as BOTH passwords below:
hal config security api ssl edit --key-alias gate --keystore ${KEYSTORE_PATH} \
  --keystore-password --keystore-type jks --truststore ${KEYSTORE_PATH} \
  --truststore-password --truststore-type jks
hal config security api ssl enable

echo $DECK_KEY_PASSWORD # use this pass below:
hal config security ui ssl edit --ssl-certificate-file ${SERVER_CERT} \
  --ssl-certificate-key-file ${SERVER_KEY} --ssl-certificate-passphrase
hal config security ui ssl enable


# ------------- OAuth
# https://spinnaker.io/setup/security/authentication/oauth/
https://github.com/settings/applications/new
spinnaker
https://spin.olowek.eu:9000/
https://spin.olowek.eu:8084/login

hal config security authn oauth2 edit \
    --pre-established-redirect-uri https://$FQDN:8084/login
hal config security api edit --override-base-url https://$FQDN:8084
hal config security ui edit --override-base-url  https://$FQDN:9000

export GITHUB_CLIENT_ID=$(aws ssm get-parameters --names /Spin/GithubClientId --with-decryption --query Parameters[0].Value --output text)
export GITHUB_CLIENT_SECRET=$(aws ssm get-parameters --names /Spin/GithubClientSecret --with-decryption --query Parameters[0].Value --output text)
hal config security authn oauth2 edit --provider github \
  --client-id $GITHUB_CLIENT_ID --client-secret $GITHUB_CLIENT_SECRET

hal config security authn oauth2 enable


hal deploy apply --flush-infrastructure-caches
systemctl daemon-reload

hal backup create
# hal backup restore --backup-path
# hal config

systemctl enable spinnaker
