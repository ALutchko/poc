AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Spryker sandbox test
Parameters:
  proj:
    Description: project name
    Type: String
  key:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  Responsible:
    Description: responsible person
    Type: String

  CreateRds:
    Description: Should we create RDS? Any value=yes, empty=no
    Type: String
    Default: ""
  CreateEs:
    Description: Should we create ElasticSearch? Any value=yes, empty=no
    Type: String
    Default: ""
  CreateEc:
    Description: Should we create ElaskiCache? Any value=yes, empty=no
    Type: String
    Default: ""

  VpcId:
    Description: _DEFAULT_ VPC Id
    Type: "AWS::EC2::VPC::Id"
  OfficeCidr:
    Description: Our office IP range
    Type: String
    Default: ""
  AlexCidr:
    Description: Yet another  IP range
    Type: String
    Default: ""
  VpcCidr:
    Description: CIDR of existing default VPC
    Type: String
  PrivCidr1:
    Description: CIDR to create 1st private subnet
    Type: String
  PrivCidr2:
    Description: CIDR to create 2nd private subnet
    Type: String
  PubCidr1:
    Description: CIDR to create 1st private subnet
    Type: String
  DefRouteId:
    Description: Id of default route table for pub subnets
    Type: String

  Ec2Type:
    Description: Instance type for Spryker
    Type: String
  Ec2Ami:
    Description: Ubuntu 18 LTS for Spryker
    Type: String
  EbsSize:
    Description: Disk size for Spryker, GB
    ConstraintDescription: 8 <= size <= 1000
    Type: Number
    MinValue: 8
    MaxValue: 1000

# ===
Conditions:
  HaveOfficeCidr:
    !Not [!Equals [!Ref OfficeCidr, ""]]
  HaveAlexCidr:
    !Not [!Equals [!Ref AlexCidr, ""]]
  CreateRds:
    !Not [!Equals [!Ref CreateRds, ""]]
  CreateEs:
    !Not [!Equals [!Ref CreateEs, ""]]
  CreateEc:
    !Not [!Equals [!Ref CreateEc, ""]]
# ===
Resources:
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivCidr1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${proj}-priv1
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivCidr2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${proj}-priv2
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  PubSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PubCidr1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${proj}-pub1
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnet1
      RouteTableId: !Ref DefRouteId
  # --
  SprykerSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: spryker-shop
      GroupDescription: Main SG for Spryker
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  SprykerSgInOffice:
    Condition: HaveOfficeCidr
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SprykerSg
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref OfficeCidr
      #SourceSecurityGroupId: !GetAtt SGBase.GroupId
  SprykerSgInAlex:
    Condition: HaveAlexCidr
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SprykerSg
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref AlexCidr
  SprykerSgInPostgres:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SprykerSg
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp: !Ref VpcCidr
  SprykerSgInRedis:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SprykerSg
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      CidrIp: !Ref VpcCidr

  # --
  DBSubnetGrp:
    Type: AWS::RDS::DBSubnetGroup
    Condition: CreateRds
    Properties:
      DBSubnetGroupDescription: !Sub ${proj}-rds
      DBSubnetGroupName: !Ref proj
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  DbCluster:
    Type: "AWS::RDS::DBCluster"
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html
    Condition: CreateRds
    DeletionPolicy: Delete
    Properties:
      BackupRetentionPeriod: 1
      DatabaseName: !Ref proj
      DBSubnetGroupName: !Ref DBSubnetGrp
      Engine: aurora-postgresql
      EngineVersion: 11.7
      MasterUsername: !Ref proj
      MasterUserPassword: "{{resolve:ssm-secure:/Spryker/Rds/pass:1}}"
      VpcSecurityGroupIds:
        - !GetAtt SprykerSg.GroupId
      Tags:
        - Key: Name
          Value: !Ref proj
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Condition: CreateRds
    Properties:
      DBInstanceClass: db.t3.medium
      Engine: aurora-postgresql
      MultiAZ: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      DBClusterIdentifier: !Ref DbCluster
      CopyTagsToSnapshot: true
      AutoMinorVersionUpgrade: true
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Ref proj
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj

  # --
  LogSearchSlow:
    Type: AWS::Logs::LogGroup
    Condition: CreateEs
    Properties:
      LogGroupName: Es_SearchSlow
      RetentionInDays: 1
  LogIndexSlow:
    Type: AWS::Logs::LogGroup
    Condition: CreateEs
    Properties:
      LogGroupName: Es_IndexSlow
      RetentionInDays: 1
  LogApp:
    Type: AWS::Logs::LogGroup
    Condition: CreateEs
    Properties:
      LogGroupName: Es_App
      RetentionInDays: 1
  LogAudit:
    Type: AWS::Logs::LogGroup
    Condition: CreateEs
    Properties:
      LogGroupName: Es_Audit
      RetentionInDays: 1
  ES:
    Type: AWS::Elasticsearch::Domain
    Condition: CreateEs
    Properties:
      DomainName: !Sub ${proj}-shop
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        InstanceType: t3.small.elasticsearch
      ElasticsearchVersion: 5.6
#      LogPublishingOptions:
#        SEARCH_SLOW_LOGS:
#          CloudWatchLogsLogGroupArn: !GetAtt LogSearchSlow.Arn
#          Enabled: 'true'
#        INDEX_SLOW_LOGS:
#          CloudWatchLogsLogGroupArn: !GetAtt LogIndexSlow.Arn
#          Enabled: 'true'
#        ES_APPLICATION_LOGS:
#          CloudWatchLogsLogGroupArn: !GetAtt LogApp.Arn
#          Enabled: 'true'
#        AUDIT_LOGS:
#          CloudWatchLogsLogGroupArn: !GetAtt LogAudit.Arn
#          Enabled: 'true'
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${proj}-shop/*"
      VPCOptions:
        SubnetIds:
          - Ref: PrivateSubnet1
        SecurityGroupIds:
          - Ref: SprykerSg
      Tags:
        - Key: Name
          Value: !Ref proj
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  # --
  ECSubnetGrp:
    Type: AWS::ElastiCache::SubnetGroup
    Condition: CreateEc
    Properties:
      CacheSubnetGroupName: !Ref proj
      Description: for Spryker's redis
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  ECCluster:
    Type: AWS::ElastiCache::CacheCluster
    Condition: CreateEc
    Properties:
      AutoMinorVersionUpgrade: true
      AZMode: single-az
      CacheNodeType:  cache.t3.micro
      CacheSubnetGroupName: !Ref ECSubnetGrp
      ClusterName: !Ref proj
      Engine: redis
      EngineVersion: 6.x
      #NotificationTopicArn: String
      NumCacheNodes: 1
      PreferredAvailabilityZone: !Select [ 0, !GetAZs '' ]
      PreferredMaintenanceWindow: "sun:23:00-mon:01:30"
      SnapshotRetentionLimit: 0
      SnapshotWindow: "05:00-09:00"
      VpcSecurityGroupIds:
        - !Ref SprykerSg
      Tags:
        - Key: Name
          Value: !Ref proj
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  # --
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref proj
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: false
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
      Scheme: internal
      SecurityGroups:
        - !Ref SprykerSg
      Tags:
        - Key: Name
          Value: !Ref proj
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Ref proj
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: '80'
      Protocol: HTTP
  # --
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/deploying.applications.html?tag=duckduckgo-ffab-20
      # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref Ec2Ami
      InstanceType: !Ref Ec2Type
      SecurityGroups:
        - !Ref SprykerSg
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: true
            VolumeSize: !Ref EbsSize
      KeyName: !Ref key
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          start=$(date)
          sed -i 's/^.* ssh-rsa /ssh-rsa /' /root/.ssh/authorized_keys
          echo "tail -f /var/log/cloud-init-output.log" >> /root/.bash_history

          apt-get update -q
          apt-mark hold grub-legacy-ec2 grub-pc grub2-common grub-pc-bin grub-common #grub
          apt-get upgrade -y --no-install-recommends -q
          instid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          echo instid $instid
          echo -n $instid > /var/local/instid

          apt-get install -y --no-install-recommends python-pip unzip \
            wget gnupg apt-transport-https python-setuptools \
            git graphviz libedit2 libpq5 libsqlite3-0 postgresql-client psmisc \
            python-dev python-setuptools redis-tools vim zip composer \
            gcc g++ make apache2-utils debconf-utils

          pip install urllib3[secure]
          curl -s "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
          unzip awscli-bundle.zip
          ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          ln /usr/local/bin/aws /usr/bin/aws

          ln -s /usr/local/aws/bin/easy_install /usr/local/bin/
          ln -s /usr/local/aws/bin/cfn-signal /usr/local/bin/
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          eggpath=/usr/local/aws/lib/python2.7/site-packages/aws_cfn_bootstrap-1.4-py2.7.egg
          chmod 700 $eggpath/init/ubuntu/cfn-hup
          ln -s  $eggpath/init/ubuntu/cfn-hup /etc/init.d/cfn-hup

          # php and nginx
          add-apt-repository ppa:ondrej/php -y
          apt-get update
          curl -sL https://deb.nodesource.com/setup_10.x | /bin/bash -

          apt-get install --no-install-recommends -q -y php7.2-fpm php7.2-curl \
            php7.2-gd php7.2-intl php7.2-bcmath php7.2-pgsql php-redis php7.2-xml \
            php7.2-mbstring php7.2-bz2 php-ssh2 php-msgpack php-memcached \
            php-imagick php-igbinary php7.2-opcache php7.2-zip php7.2-sqlite3 \
            php7.2-mysql php7.2-intl php7.2-cli php7.2-dev  php7.2-gmp \
            nginx nginx-extras ca-certificates nodejs

          debconf-set-selections <<< "postfix postfix/mailname string your.hostname.com"
          debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
          apt-get install --no-install-recommends -y postfix

          srcdir=https://github.com/ALutchko/poc/raw/spinnaker/Spryker/
          wget -nv $srcdir/yves.conf -O /etc/php/7.2/fpm/pool.d/yves.conf
          wget -nv $srcdir/zed.conf -O /etc/php/7.2/fpm/pool.d/zed.conf
          wget -nv $srcdir/glue.conf -O /etc/php/7.2/fpm/pool.d/glue.conf
          wget -nv $srcdir/10-opcache.ini -O /etc/php/7.2/fpm/conf.d/10-opcache.ini
          # country-specific
          wget -nv $srcdir/vhost-yves-EU.conf -O /etc/nginx/conf.d/vhost-yves-EU.conf
          wget -nv $srcdir/vhost-zed-EU.conf -O /etc/nginx/conf.d/vhost-zed-EU.conf
          wget -nv $srcdir/vhost-glue-EU.conf -O /etc/nginx/conf.d/vhost-glue-EU.conf
          user="{{resolve:ssm:/Spryker/htpasswd/EU/user:1}}"
          pass="{{resolve:ssm-secure:/Spryker/htpasswd/EU/pass:1}}"
          htpasswd -c /etc/nginx/.htpasswd $user $pass

          update-alternatives --set php /usr/bin/php7.2
          update-alternatives --set phar /usr/bin/phar7.2
          update-alternatives --set phar.phar /usr/bin/phar.phar7.2
          update-alternatives --set phpize /usr/bin/phpize7.2
          update-alternatives --set php-config /usr/bin/php-config7.2
          rm /etc/nginx/sites-enabled/default
          wget -nv $srcdir/jenkins.conf -O /etc/nginx/conf.d/jenkins.conf
          wget -nv $srcdir/fastcgi_params -O /etc/nginx/fastcgi_params

          service php7.2-fpm restart
          service nginx restart

          # RabbitMQ
          wget -nv https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
          wget -nv -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | apt-key add -
          dpkg -i erlang-solutions_1.0_all.deb
          wget -nv -O- https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc | apt-key add -
          wget -nv -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | apt-key add -
          echo "deb https://dl.bintray.com/rabbitmq/debian $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/rabbitmq.list
          apt-get update
          apt-get install --no-install-recommends -y rabbitmq-server
          chown -R rabbitmq:rabbitmq /var/lib/rabbitmq/
          service rabbitmq-server start
          rabbitmq-plugins enable rabbitmq_management
          rabbitmqctl add_user admin "{{resolve:ssm-secure:/Spryker/rabbit/adm_pass:1}}"
          rabbitmqctl add_vhost /EU_spryker_zed
          rabbitmqctl set_user_tags admin administrator
          rabbitmqctl set_permissions -p /EU_spryker_zed admin ".*" ".*" ".*"
          rabbitmqctl add_user spryker "{{resolve:ssm-secure:/Spryker/rabbit/spryker_pass:1}}"
          rabbitmqctl set_user_tags spryker administrator
          rabbitmqctl set_permissions -p /EU_spryker_zed spryker ".*" ".*" ".*"

          # Jenkins
          wget -nv -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | apt-key add -
          echo deb http://pkg.jenkins.io/debian-stable binary/>/etc/apt/sources.list.d/jenkins.list
          #apt-get update
          #apt-get install --no-install-recommends -y jenkins=2.164.3 openjdk-8-jdk
          #update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
          #service jenkins stop


          # If all went well, signal success
          cfn-signal -e $? -r 'Initial configuration completed successfully' \
            --stack ${AWS::StackName} --resource SprykerASG --region ${AWS::Region}
          echo start: $start
          echo end: $(date)

  SprykerASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Ref proj
      VPCZoneIdentifier:
        - !Ref PubSubnet1
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      #HealthCheckType: ELB
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Responsible
          Value: !Ref Responsible
          PropagateAtLaunch: true
        - Key: proj
          Value: !Ref proj
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT5M
        WaitOnResourceSignals: false

# ===
Outputs:
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2