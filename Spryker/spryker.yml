AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Spryker sandbox test
Parameters:
  proj:
    Description: project name
    Type: String
  key:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  Responsible:
    Description: responsible person
    Type: String

  VpcId:
    Description: _DEFAULT_ VPC Id
    Type: "AWS::EC2::VPC::Id"
  OfficeCidr:
    Description: Our office IP range
    Type: String
    Default: ""
  AlexCidr:
    Description: Yet another  IP range
    Type: String
    Default: ""
  VpcCidr:
    Description: CIDR of existing default VPC
    Type: String
  PrivCidr1:
    Description: CIDR to create 1st private subnet
    Type: String
  PrivCidr2:
    Description: CIDR to create 2nd private subnet
    Type: String

# ===
Conditions:
  HaveOfficeCidr:
    !Not [!Equals [!Ref OfficeCidr, ""]]
  HaveAlexCidr:
    !Not [!Equals [!Ref AlexCidr, ""]]
# ===
Resources:
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivCidr1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${proj}-priv1
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivCidr2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${proj}-priv2
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj

  # --
  SprykerSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: spryker-shop
      GroupDescription: Main SG for Spryker
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  SprykerSgInOffice:
    Condition: HaveOfficeCidr
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SprykerSg
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref OfficeCidr
      #SourceSecurityGroupId: !GetAtt SGBase.GroupId
  SprykerSgInAlex:
    Condition: HaveAlexCidr
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SprykerSg
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref AlexCidr
  SprykerSgInPostgres:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SprykerSg
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp: !Ref VpcCidr
  SprykerSgInRedis:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SprykerSg
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      CidrIp: !Ref VpcCidr

  # --
  DBSubnetGrp:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${proj}-rds
      DBSubnetGroupName: !Ref proj
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  DbCluster:
    Type: "AWS::RDS::DBCluster"
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html
    DeletionPolicy: Delete
    Properties:
      BackupRetentionPeriod: 1
      DatabaseName: !Ref proj
      DBSubnetGroupName: !Ref DBSubnetGrp
      Engine: aurora-postgresql
      EngineVersion: 11.7
      MasterUsername: !Ref proj
      MasterUserPassword: "{{resolve:ssm-secure:/Spryker/Rds/pass:1}}"
      VpcSecurityGroupIds:
        - !GetAtt SprykerSg.GroupId
      Tags:
        - Key: Name
          Value: !Ref proj
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceClass: db.t3.medium
      Engine: aurora-postgresql
      MultiAZ: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      DBClusterIdentifier: !Ref DbCluster
      CopyTagsToSnapshot: true
      AutoMinorVersionUpgrade: true
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Ref proj
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj

  # --
  LogSearchSlow:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: Es_SearchSlow
      RetentionInDays: 1
  LogIndexSlow:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: Es_IndexSlow
      RetentionInDays: 1
  LogApp:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: Es_App
      RetentionInDays: 1
  LogAudit:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: Es_Audit
      RetentionInDays: 1
  ES:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Sub ${proj}-shop
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        InstanceType: t3.small.elasticsearch
      ElasticsearchVersion: 5.6
#      LogPublishingOptions:
#        SEARCH_SLOW_LOGS:
#          CloudWatchLogsLogGroupArn: !GetAtt LogSearchSlow.Arn
#          Enabled: 'true'
#        INDEX_SLOW_LOGS:
#          CloudWatchLogsLogGroupArn: !GetAtt LogIndexSlow.Arn
#          Enabled: 'true'
#        ES_APPLICATION_LOGS:
#          CloudWatchLogsLogGroupArn: !GetAtt LogApp.Arn
#          Enabled: 'true'
#        AUDIT_LOGS:
#          CloudWatchLogsLogGroupArn: !GetAtt LogAudit.Arn
#          Enabled: 'true'
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${proj}-shop/*"
      VPCOptions:
        SubnetIds:
          - Ref: PrivateSubnet1
        SecurityGroupIds:
          - Ref: SprykerSg
      Tags:
        - Key: Name
          Value: !Ref proj
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj
  # --
  ECSubnetGrp:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Ref proj
      Description: for Spryker's redis
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  ECCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: true
      AZMode: single-az
      CacheNodeType:  cache.t3.micro
      CacheSubnetGroupName: !Ref ECSubnetGrp
      ClusterName: !Ref proj
      Engine: redis
      EngineVersion: 6.x
      #NotificationTopicArn: String
      NumCacheNodes: 1
      PreferredAvailabilityZone: !Select [ 0, !GetAZs '' ]
      PreferredAvailabilityZones:
        - String
      PreferredMaintenanceWindow: "sun:23:00-mon:01:30"
      SnapshotRetentionLimit: 0
      SnapshotWindow: "05:00-09:00"
      VpcSecurityGroupIds:
        - !Ref SprykerSg
      Tags:
        - Key: Name
          Value: !Ref proj
        - Key: Responsible
          Value: !Ref Responsible
        - Key: proj
          Value: !Ref proj



# ===
Outputs:
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2