# based on  https://medium.com/@susanto.bn/aws-kubernetes-eks-part-1-create-using-cloudformation-with-hardened-bastion-4e459250ffd0
AWSTemplateFormatVersion: '2010-09-09'
Description: EKS creation

Parameters:
  VpcName:
    Description: Vpc name that will be prefixed to resource name
    Type: String
    Default: eks

  VpcCIDR:
    Description: IP range for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetA1Cidr:
    Description: IP range for AvailabilityZone-A PublicSubnet-1 (NatGateway will be deployed here)
    Type: String
    Default: 10.0.1.0/24

  PublicSubnetA2Eks1Cidr:
    Description: IP range for AvailabilityZone-A PublicSubnet-2 (Eks 1 will use this)
    Type: String
    Default: 10.0.2.0/24

  PublicSubnetB1Eks1Cidr:
    Description: IP range for AvailabilityZone-B PublicSubnet-1 (Eks 1 will use this)
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnetA1Eks1Cidr:
    Description: IP range for AvailabilityZone-A PrivateSubnet-1 (Eks 1 will use this)
    Type: String
    Default: 10.0.4.0/24

  PrivateSubnetB1Eks1Cidr:
    Description: IP range for AvailabilityZone-B PrivateSubnet-1 (Eks 1 will use this)
    Type: String
    Default: 10.0.5.0/24

  Eks1ClusterName:
    Description: EKS 1 Cluster Name
    Type: String
    Default: samdbox-spinnaker

  Responsible:
    Description: responsible person
    Type: String

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}
        - Key: !Sub "kubernetes.io/cluster/${Eks1ClusterName}"
          Value: 'shared'
        - Key: Responsible
          Value: !Ref Responsible

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-igw
        - Key: Responsible
          Value: !Ref Responsible

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateway
  NatGatewayA1Eip:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayA1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayA1Eip.AllocationId
      SubnetId: !Ref PublicSubnetA1

  # Public Subnet
  PublicSubnetA1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetA1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-public-a1
        - Key: Responsible
          Value: !Ref Responsible

  PublicSubnetA2Eks1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetA2Eks1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-public-a2-eks-${Eks1ClusterName}
        - Key: !Sub "kubernetes.io/cluster/${Eks1ClusterName}"
          Value: 'shared'
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Responsible
          Value: !Ref Responsible

  PublicSubnetB1Eks1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetB1Eks1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-public-b1-eks-${Eks1ClusterName}
        - Key: !Sub "kubernetes.io/cluster/${Eks1ClusterName}"
          Value: 'shared'
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Responsible
          Value: !Ref Responsible

  # Public Route
  PublicRouteTableA1:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-public-route-a1
        - Key: Responsible
          Value: !Ref Responsible

  PublicRouteTableA1Default:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableA1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableA1AssocPublicSubnetA1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA1
      SubnetId: !Ref PublicSubnetA1

  PublicRouteTableA1AssociatePublicSubnetA2Eks1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA1
      SubnetId: !Ref PublicSubnetA2Eks1

  PublicRouteTableA1AssociatePublicSubnetB1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA1
      SubnetId: !Ref PublicSubnetB1Eks1

  # Private Subnet
  PrivateSubnetA1Eks1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetA1Eks1Cidr
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${Eks1ClusterName}"
          Value: 'shared'
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub ${VpcName}-private-a1-eks-${Eks1ClusterName}
        - Key: Responsible
          Value: !Ref Responsible

  PrivateSubnetB1Eks1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetB1Eks1Cidr
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${Eks1ClusterName}"
          Value: 'shared'
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub ${VpcName}-private-b1-eks-${Eks1ClusterName}
        - Key: Responsible
          Value: !Ref Responsible

  # Private Route
  PrivateRouteTableA1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-private-route-a1
        - Key: Responsible
          Value: !Ref Responsible

  PrivateRouteTableA1Default:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA1

  PrivateRouteTableA1AssociatePrivateSubnetA1Eks1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTableA1
      - PrivateSubnetA1Eks1
    Properties:
      RouteTableId: !Ref PrivateRouteTableA1
      SubnetId: !Ref PrivateSubnetA1Eks1

  PrivateRouteTableB1:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-private-route-b1

  PrivateRouteTableB1Default:
    Type: AWS::EC2::Route
    DependsOn:
      - PrivateRouteTableB1
      - NatGatewayA1
    Properties:
      RouteTableId: !Ref PrivateRouteTableB1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA1

  PrivateRouteTableB1AssociatePrivateSubnetB1Eks1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTableB1
      - PrivateSubnetB1Eks1
    Properties:
      RouteTableId: !Ref PrivateRouteTableB1
      SubnetId: !Ref PrivateSubnetB1Eks1

  # NoIngress Security Group
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  # Bastion Security Group
  BastionHostSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Attached to Bastion Host and allow other resources only accessible by this Security Group
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-bastion-sg"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'

  # EKS Cluster Security Group
  Eks1ControlPlaneSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allowing API request from Worker Nodes & Bastion Host, and allow out going to all Worker Nodes
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-eks-${Eks1ClusterName}-controlplane-sg"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref BastionHostSg
          Description: Allow Control Plane to receive API requests from Bastion Host

  Eks1ControlPlaneSgFromEksWorkerSg:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Control Plane to receive API requests from Worker Nodes
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref Eks1WorkerSg
      FromPort: 443
      ToPort: 443
      GroupId: !Ref Eks1ControlPlaneSg

  Eks1ControlPlaneSgToEksWorkerSg:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow Control Plane only access Worker Nodes
      IpProtocol: tcp
      GroupId: !Ref Eks1ControlPlaneSg
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref Eks1WorkerSg

  # EKS Worker Security Group
  Eks1WorkerSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Communication between the Control Plane and Worker Nodes in group standard-workers
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${Eks1ClusterName}"
          Value: owned
        - Key: Name
          Value: !Sub "${VpcName}-eks-${Eks1ClusterName}-worker-sg"

  Eks1WorkerSgFromEksWorkerSg:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Worker Nodes interact each others using any port and protocols
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref Eks1WorkerSg
      GroupId: !Ref Eks1WorkerSg

  EksWorkerSgFromEks1ControlPlaneSg:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Control Plane to access all Worker Nodes port (allowing proxy functionality or run the CNCF conformance tests)
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref Eks1ControlPlaneSg
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref Eks1WorkerSg



  # EKS Service Role
  EksServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to be used by EKS Control Plane
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EksServiceRoleCloudWatchMetricPolicy:
    Type: AWS::IAM::Policy
    DependsOn: EksServiceRole
    Properties:
      #Description: Allow EksServiceRole to Put CloudWatch Metric Data
      PolicyDocument:
        Statement:
        - Action:
          - cloudwatch:PutMetricData
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName: "CloudWatchMetricPolicy"
      Roles:
      - Ref: EksServiceRole

  EksServiceRoleLoadBalancerPolicy:
    Type: AWS::IAM::Policy
    DependsOn: EksServiceRole
    Properties:
      #Description: Allow EksServiceRole to Create Security Group, Describe EC2 related information, and any action related to ELB
      PolicyDocument:
        Statement:
        - Action:
          - elasticloadbalancing:*
          - ec2:CreateSecurityGroup
          - ec2:Describe*
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName: "LoadBalancerPolicy"
      Roles:
      - Ref: EksServiceRole

# EKS Worker Role
  EksWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to be used by EKS Worker Node / Instance
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
      - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Path: "/"

  EksWorkerRoleIngressControllerPolicy:
    Type: AWS::IAM::Policy
    DependsOn: EksWorkerRole
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - acm:DescribeCertificate
          - acm:ListCertificates
          - acm:GetCertificate
          Effect: Allow
          Resource: "*"
        - Action:
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CreateSecurityGroup
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DeleteSecurityGroup
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeInstances
          - ec2:DescribeInstanceStatus
          - ec2:DescribeInternetGateways
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeTags
          - ec2:DescribeVpcs
          - ec2:ModifyInstanceAttribute
          - ec2:ModifyNetworkInterfaceAttribute
          - ec2:RevokeSecurityGroupIngress
          Effect: Allow
          Resource: "*"
        - Action:
          - elasticloadbalancing:AddListenerCertificates
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:CreateListener
          - elasticloadbalancing:CreateLoadBalancer
          - elasticloadbalancing:CreateRule
          - elasticloadbalancing:CreateTargetGroup
          - elasticloadbalancing:DeleteListener
          - elasticloadbalancing:DeleteLoadBalancer
          - elasticloadbalancing:DeleteRule
          - elasticloadbalancing:DeleteTargetGroup
          - elasticloadbalancing:DeregisterTargets
          - elasticloadbalancing:DescribeListenerCertificates
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeLoadBalancerAttributes
          - elasticloadbalancing:DescribeRules
          - elasticloadbalancing:DescribeSSLPolicies
          - elasticloadbalancing:DescribeTags
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:DescribeTargetGroupAttributes
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:ModifyListener
          - elasticloadbalancing:ModifyLoadBalancerAttributes
          - elasticloadbalancing:ModifyRule
          - elasticloadbalancing:ModifyTargetGroup
          - elasticloadbalancing:ModifyTargetGroupAttributes
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:RemoveListenerCertificates
          - elasticloadbalancing:RemoveTags
          - elasticloadbalancing:SetIpAddressType
          - elasticloadbalancing:SetSecurityGroups
          - elasticloadbalancing:SetSubnets
          - elasticloadbalancing:SetWebACL
          Effect: Allow
          Resource: "*"
        - Action:
          - iam:CreateServiceLinkedRole
          - iam:GetServerCertificate
          - iam:ListServerCertificates
          Effect: Allow
          Resource: "*"
        - Action:
          - waf-regional:GetWebACLForResource
          - waf-regional:GetWebACL
          - waf-regional:AssociateWebACL
          - waf-regional:DisassociateWebACL
          Effect: Allow
          Resource: "*"
        - Action:
          - tag:GetResources
          - tag:TagResources
          Effect: Allow
          Resource: "*"
        - Action:
          - waf:GetWebACL
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName: "IngressControllerPolicy"
      Roles:
      - Ref: EksWorkerRole

# EKS Worker Profile
  EksWorkerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: EksWorkerRole
    Properties:
      Path: "/"
      Roles:
      - Ref: EksWorkerRole

Outputs:
# EKS Service Role
  EksServiceRole:
    Description: Ref of Created EKS Service Role
    Export:
      Name: !Sub ${AWS::StackName}::EksServiceRole
    Value:
      Ref: EksServiceRole

  EksServiceRoleArn:
    Description: Ref of Created EKS Service Role Arn
    Export:
      Name: !Sub ${AWS::StackName}::EksServiceRoleArn
    Value: !GetAtt EksServiceRole.Arn

# EKS Worker Role
  EksWorkerInstanceProfileArn:
    Description: Ref of Created EKS Worker InstanceProfile Arn
    Export:
      Name: !Sub "${AWS::StackName}::EksWorkerInstanceProfileArn"
    Value: !GetAtt EksWorkerInstanceProfile.Arn

  EksWorkerRoleArn:
    Description: Ref of Created EKS Worker Role Arn
    Export:
      Name: !Sub "${AWS::StackName}::EksWorkerRoleArn"
    Value: !GetAtt EksWorkerRole.Arn

